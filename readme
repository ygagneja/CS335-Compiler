abstract decl are not a part
bool and char are inherently is_type_int
no block stmts in global scope
level 0 and 1 have all level_id = 0
decl and defn must have same types and sym names
storage specifiers and type qualifiers not implemented
enum not implemented
strictness on return types of void and non void
ahead goto label throws error (label needs to be defined first)
cannot initialise arrays and structs during declaration itself (can initialise char* strings tho with string literal)
user is assumed to use arrays responsibly
simple declarations only allowed inside structs
structs direct equality not allowed
types supported : int, float, char, bool, pointer, struct, function, void, (think about multi ptr)
document all type requirements for expression operations
very nice and extensive typecasting mechanism employed
can add/equate only integers to pointers, so do explicit typecasting if reqd
do not use break/continue in if stmt (without loop) and continue in switch stmt (without loop)
array of pointers not allowed
// array must be dereferenced till max dimensions and cannot be accessed using * op but only [] !!
// pointers cannot be dereferenced using [] but only * op
do not call main or recurse in main
user has to be responsible with adding return stmts in funcs, if not added properly, garbage will be returned in case of non-void funcs